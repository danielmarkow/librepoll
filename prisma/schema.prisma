// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// Define the Form model
model Form {
    id             String           @id @default(cuid())
    name           String
    description    String?
    createdAt      DateTime         @default(now())
    updatedAt      DateTime         @updatedAt
    fields         Field[]
    user           User             @relation(fields: [userId], references: [id])
    userId         String
    public         Boolean          @default(false)
    publicFormData PublicFormData[]

    @@unique([id, userId])
    @@index([userId])
}

// Define the Field model
model Field {
    id       String   @id @default(cuid())
    name     String
    label    String
    type     String
    required Boolean  @default(false)
    form     Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
    formId   String
    options  Option[]
    user     User     @relation(fields: [userId], references: [id])
    userId   String

    @@index([formId])
}

// Define the Option model
model Option {
    id      String @id @default(cuid())
    value   String
    field   Field  @relation(fields: [fieldId], references: [id], onDelete: Cascade)
    fieldId String
    user    User   @relation(fields: [userId], references: [id])
    userId  String

    @@index([fieldId])
}

// holds the form submissions as stringifyed JSON
// switch to json type when using mysql
model PublicFormData {
    id              String   @id @default(cuid())
    submission      String
    lastUpdatedForm DateTime
    form            Form     @relation(fields: [formId], references: [id], onDelete: Cascade)
    formId          String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    @@index([formId])
}

// when was the form data
// last extracted (used to prevent misuse)
model LastExtracted {
    formId        String   @id
    lastExtracted DateTime
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    forms         Form[]
    fields        Field[]
    options       Option[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
